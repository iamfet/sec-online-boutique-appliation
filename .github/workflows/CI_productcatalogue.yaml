name: Product Catalog CI

on:
  pull_request:
    branches: [main]
    paths:
      - 'src/productcatalogservice/**'
      - '.github/workflows/CI_productcatalogue.yaml'

env:
  GO_VERSION: '1.22'
  SERVICE_PATH: './src/productcatalogservice'
  IMAGE_NAME: 'productcatalogservice'

jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download dependencies
        working-directory: ${{ env.SERVICE_PATH }}
        run: go mod download

      - name: Build application
        working-directory: ${{ env.SERVICE_PATH }}
        run: go build -v -o product-catalog-service

      - name: Run tests with coverage
        working-directory: ${{ env.SERVICE_PATH }}
        run: |
          go test -v -coverprofile=coverage.out ./...

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: build-and-test
    continue-on-error: true
    permissions:
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          working-directory: ${{ env.SERVICE_PATH }}
          args: --timeout=5m --output.text.path=stdout --output.sarif.path=golangci-lint.sarif

  gitleaks-scan:
    name: Gitleaks Secret Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    continue-on-error: true
    permissions:
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Run gitleaks with Docker
        run: |
          docker run --rm \
            -v $(pwd):/repo \
            zricethezav/gitleaks:latest \
            detect --source=/repo \
            --report-path=/repo/gitleaks.sarif \
            --report-format=sarif \
            --exit-code=0

  snyk-security-scan:
    name: Snyk Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    continue-on-error: true
    permissions:
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/golang@master
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif ./src/productcatalogservice

  sonarqube-security-scan:
    name: Sonarqube Security Analysis
    runs-on: ubuntu-latest
    needs: build-and-test
    continue-on-error: true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run SonarCloud scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      
      - name: Export SonarQube results
        if: always()
        run: |
          
          # Get project key from sonar-project.properties
          PROJECT_KEY="iamfet_sec-online-boutique-appliation"
          
          # Export issues as JSON
          curl -u "${{ secrets.SONAR_TOKEN }}:" \
            "${{ secrets.SONAR_URL }}/api/issues/search?componentKeys=${PROJECT_KEY}&resolved=false" \
            -o sonarqube-issues.json

  build-and-scan-image:
    name: Build & Scan Docker Image
    runs-on: ubuntu-latest
    needs: [code-quality, sonarqube-security-scan, gitleaks-scan, snyk-security-scan]
    if: always()
    permissions:
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.SERVICE_PATH }}
          file: ${{ env.SERVICE_PATH }}/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/productcatalogservice:v${{ github.run_id }}
          outputs: type=docker,dest=/tmp/productcatalogservice.tar

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          input: /tmp/productcatalogservice.tar
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          ignore-unfixed: true

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  update-manifest:
    name: Update K8s Manifest
    runs-on: ubuntu-latest
    needs: build-and-scan-image
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ACTIONS_PA_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.email "${{ secrets.USER_EMAIL }}"
          git config --global user.name "${{ secrets.USER_NAME }}"

      - name: Update deployment manifest
        run: |
          IMAGE_TAG="${{ secrets.DOCKERHUB_USERNAME }}/productcatalogservice:v${{ github.run_id }}"
          sed -i "s|image: .*|image: ${IMAGE_TAG}|" kubernetes/productcatalogservice/deploy.yaml
          

      - name: Commit and push changes
        run: |
          git add kubernetes/productcatalogservice/deploy.yaml
          git commit -m "ci: update ${{ env.IMAGE_NAME }} image to v${{ github.run_id }}"
          git push origin HEAD:main -f

  trigger-gitops:
    name: Trigger GitOps
    runs-on: ubuntu-latest
    needs: update-manifest
    
    steps:
      - name: Trigger GitOps repository
        run: |
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.ACTIONS_PA_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/iamfet/sec-gitops-online-boutique/dispatches \
            -d '{
              "event_type": "update-productcatalog-tag",
              "client_payload": {
                "new_tag": "v${{ github.run_id }}"
              }
            }'